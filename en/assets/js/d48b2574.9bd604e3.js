"use strict";(self.webpackChunkdoctest=self.webpackChunkdoctest||[]).push([[694],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>f});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function m(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=a.createContext({}),s=function(e){var n=a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=s(e.components);return a.createElement(i.Provider,{value:n},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},g=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,c=m(e,["components","mdxType","originalType","parentName"]),u=s(t),g=r,f=u["".concat(i,".").concat(g)]||u[g]||p[g]||l;return t?a.createElement(f,o(o({ref:n},c),{},{components:t})):a.createElement(f,o({ref:n},c))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,o=new Array(l);o[0]=g;var m={};for(var i in n)hasOwnProperty.call(n,i)&&(m[i]=n[i]);m.originalType=e,m[u]="string"==typeof e?e:r,o[1]=m;for(var s=2;s<l;s++)o[s]=t[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}g.displayName="MDXCreateElement"},2099:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>p,frontMatter:()=>l,metadata:()=>m,toc:()=>s});var a=t(7462),r=(t(7294),t(3905));const l={title:"AtomicReference",authors:["Vincent"],tags:["java"]},o=void 0,m={permalink:"/en/blog/2023/5/23/index",source:"@site/blog/2023-5-23/index.md",title:"AtomicReference",description:"lambda\u8a9e\u6cd5\u4e2d\u4f7f\u7528\u5230local variable\u6642\uff0c\u5fc5\u9808\u662feffective final\u3002",date:"2023-05-23T00:00:00.000Z",formattedDate:"May 23, 2023",tags:[{label:"java",permalink:"/en/blog/tags/java"}],readingTime:1.88,hasTruncateMarker:!1,authors:[{name:"Vincent",email:"vincent.tsd@gmail.com",key:"Vincent"}],frontMatter:{title:"AtomicReference",authors:["Vincent"],tags:["java"]},nextItem:{title:"Welcome",permalink:"/en/blog/2023/5/17/first"}},i={authorsImageUrls:[void 0]},s=[],c={toc:s},u="wrapper";function p(e){let{components:n,...t}=e;return(0,r.kt)(u,(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"lambda\u8a9e\u6cd5\u4e2d\u4f7f\u7528\u5230local variable\u6642\uff0c\u5fc5\u9808\u662feffective final\u3002"),(0,r.kt)("p",null,"\u4f8b\u5982\u6211\u5011\u60f3\u5728\u4ee5\u4e0b\u7684List\u4e2d\uff0c\u53d6\u5f97\u6240\u6709\u5b57\u6578\u7684\u7e3d\u5408\uff0c\u4e26\u4e14\u53d6\u5f97\u5b57\u6578\u6700\u9577\u7684\u5b57\uff0c\u4ee5\u4e0b\u662f\u4f7f\u7528\u8ff4\u5708\u8655\u7406\u7684\u7bc4\u4f8b\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},'List<String> names = Arrays.asList("Vincent", "David", "Ken", "Randolph");\nString maxLengthName = null;\nint totalWordCount = 0;\nfor (String name : names) {\n    if ( maxLengthName == null ){\n        maxLengthName = name;\n    }\n    if ( name.length() > maxLengthName.length()){\n        maxLengthName = name;\n    }\n    totalWordCount = totalWordCount + name.length();\n}\nSystem.out.println("maxLengthName = " + maxLengthName);\n')),(0,r.kt)("p",null,"\u5982\u679c\u4f7f\u7528stream\u4f86\u8655\u7406\uff0c\u53d6\u5f97\u5b57\u7e3d\u548c\u4e5f\u5f88\u5bb9\u6613"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},'List<String> names = Arrays.asList("Vincent", "David", "Ken", "Randolph");\nlong totalWordCount = names.stream().mapToInt(String::length).sum();\n')),(0,r.kt)("p",null,"\u4f46\u5982\u679c\u60f3\u8981\u5728\u540c\u4e00\u500bstream\u4e2d\u53d6\u5f97\u5b57\u6578\u6700\u9577\u7684\u5b57\uff0c\u8a66\u8457\u7528\u8ddf\u8ff4\u5708\u4e00\u6a23\u7684\u8655\u7406\u65b9\u5f0f"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},'String maxLengthName = null;\nList<String> names = Arrays.asList("Vincent", "David", "Ken", "Randolph");\nlong totalLength = names.stream().mapToInt(name ->{\n    if ( maxLengthName == null ){\n        maxLengthName = name;\n    }\n    if ( name.length() > maxLengthName.length()){\n        maxLengthName = name;\n    }\n    return name.length();\n}).count();\n')),(0,r.kt)("p",null,"\u4e0a\u8ff0\u7684\u4f8b\u5b50\u4e2d\uff0c\u7b2c4\u884ccompile\u6703\u767c\u751f\u932f\u8aa4\u300cVariable used in lambda expression should be final or effectively final\u300d\uff0c\u56e0\u70ba\u5728lambda\u4e2d\u6539\u8b8alocal variable(",(0,r.kt)("strong",{parentName:"p"},"maxLengthName"),")\u7684\u503c\u662f\u4e0d\u88ab\u5141\u8a31\u7684\uff0c\u6240\u8b02\u7684effective final\u5c31\u662f\u7a0b\u5f0f\u4e2d\u5ba3\u544a\u6c92\u6709\u8a3b\u660e\u8b8a\u6578\u70bafinal\uff0c\u4f46\u8b8a\u6578\u7684\u503c\u5f9e\u4f86\u6c92\u6709\u88ab\u6539\u8b8a\u904e\uff0c\u5247\u53ef\u4ee5\u8996\u70bafinal\u3002"),(0,r.kt)("p",null,"\u5229\u7528AtomicReference\u4f86\u6539\u5beb\u4e0a\u9762\u7684\u7a0b\u5f0f\uff0c\u53ef\u4ee5\u907f\u958bfinal\u7684\u554f\u984c\uff0c\u56e0\u70ba\u9019\u88cfmaxLengthNameRef\u4e26\u6c92\u6709\u88ab\u6539\u8b8a\uff0c\u6539\u8b8a\u7684\u662f\u88cf\u9762\u5b58\u7684\u503c\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'List<String> names = Arrays.asList("Vincent", "David", "Ken", "Randolph");\nAtomicReference<String> maxLengthNameRef = new AtomicReference<>(null);\nlong totalWordCount = names.stream().peek(name -> {\n    maxLengthNameRef.compareAndSet(null, name);\n    if (name.length() > maxLengthNameRef.get().length()) {\n        maxLengthNameRef.set(name);\n    }\n}).mapToInt(String::length).sum();\nSystem.out.println("totalWordCount = " + totalWordCount);\nSystem.out.println("maxLength = " + maxLengthNameRef.get());\n')))}p.isMDXComponent=!0}}]);